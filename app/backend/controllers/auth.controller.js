const pool = require("../config/db")
const bcrypt = require("bcrypt")
const jwt = require("jsonwebtoken")

// Default values as fallback
const adminUsername = process.env.ADMIN_USERNAME || "admin"
const adminPassword = process.env.ADMIN_PASSWORD || "CT467"
const jwtSecret = process.env.JWT_SECRET || "CT467"

console.log("üîê Auth Controller Configuration:")
console.log("üëë Admin Username:", adminUsername)
console.log("üîë JWT Secret:", jwtSecret ? "‚úÖ Set" : "‚ùå Missing")

exports.register = async (req, res) => {
  const { MaNguoiDung, TenNguoiDung, SoDienThoai, Email, VaiTro, MatKhau } = req.body

  console.log("üìù Registration attempt for user:", MaNguoiDung)

  if (!MaNguoiDung || !TenNguoiDung || !MatKhau) {
    console.log("‚ùå Registration failed: Missing required fields")
    return res.status(400).json({ error: "Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc" })
  }

  try {
    const hash = await bcrypt.hash(MatKhau, 10)
    console.log("üîí Password hashed successfully")

    pool.query(
      `INSERT INTO NguoiDung (MaNguoiDung, TenNguoiDung, SoDienThoai, Email, VaiTro, MatKhau)
       VALUES (?, ?, ?, ?, ?, ?)`,
      [MaNguoiDung, TenNguoiDung, SoDienThoai, Email, "user", hash],
      (err) => {
        if (err) {
          console.error("‚ùå Registration database error:", err)
          return res.status(500).json({ error: "T√†i kho·∫£n ƒë√£ t·ªìn t·∫°i ho·∫∑c l·ªói h·ªá th·ªëng" })
        }
        console.log("‚úÖ User registered successfully:", MaNguoiDung)
        res.json({ message: "ƒêƒÉng k√Ω th√†nh c√¥ng" })
      },
    )
  } catch (err) {
    console.error("‚ùå Registration error:", err)
    res.status(500).json({ error: "L·ªói server" })
  }
}

exports.login = async (req, res) => {
  const { MaNguoiDung, MatKhau } = req.body

  console.log("üîê Login attempt for user:", MaNguoiDung)

  if (!MaNguoiDung || !MatKhau) {
    console.log("‚ùå Login failed: Missing credentials")
    return res.status(400).json({ error: "Thi·∫øu MaNguoiDung ho·∫∑c MatKhau" })
  }

  try {
    // T√¨m user trong database tr∆∞·ªõc
    const [results] = await pool.promise().query("SELECT * FROM NguoiDung WHERE MaNguoiDung = ?", [MaNguoiDung])

    if (results.length === 0) {
      console.log("‚ùå Login failed: User not found in database -", MaNguoiDung)
      return res.status(401).json({ error: "T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i" })
    }

    const user = results[0]
    console.log("üë§ User found in database:", user.MaNguoiDung, "- Role:", user.VaiTro)

    // Ki·ªÉm tra password
    const match = await bcrypt.compare(MatKhau, user.MatKhau)

    if (!match) {
      console.log("‚ùå Login failed: Wrong password for user -", MaNguoiDung)
      return res.status(401).json({ error: "Sai m·∫≠t kh·∫©u" })
    }

    // T·∫°o token v·ªõi th·ªùi gian h·∫øt h·∫°n 24 gi·ªù
    const token = jwt.sign(
      {
        MaNguoiDung: user.MaNguoiDung,
        VaiTro: user.VaiTro,
        TenNguoiDung: user.TenNguoiDung,
      },
      jwtSecret,
      { expiresIn: "24h" },
    )

    console.log("‚úÖ Login successful for user:", user.MaNguoiDung, "- Role:", user.VaiTro)

    res.json({
      message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng",
      token,
      user: {
        MaNguoiDung: user.MaNguoiDung,
        TenNguoiDung: user.TenNguoiDung,
        Email: user.Email,
        VaiTro: user.VaiTro,
      },
    })
  } catch (error) {
    console.error("‚ùå Login error:", error)
    return res.status(500).json({ error: "L·ªói server n·ªôi b·ªô" })
  }
}
